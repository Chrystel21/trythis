// Import necessary dependencies and components
import React, { useState, useEffect } from 'react';
import { useHistory } from 'react-router-dom';
import {
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Button,
  TablePagination,
} from '@mui/material';
import UpdateContact from './UpdateContact';  // Import the UpdateContact component

const ContactTable = () => {
  const [contacts, setContacts] = useState([]);
  const [selectedContact, setSelectedContact] = useState(null);
  const [openUpdateDialog, setOpenUpdateDialog] = useState(false);

  // Fetch contacts from local storage on component mount
  useEffect(() => {
    const storedContacts = JSON.parse(localStorage.getItem('contacts')) || [];
    setContacts(storedContacts);
  }, []);

  const history = useHistory();

  const handleOpenUpdateDialog = (contactId) => {
    const selectedContact = contacts.find((contact) => contact.id === contactId);
    setSelectedContact(selectedContact);
    setOpenUpdateDialog(true);
  };

  const handleCloseUpdateDialog = () => {
    setOpenUpdateDialog(false);
    setSelectedContact(null);
  };

  const handleUpdateContact = (updatedContact) => {
    // Implement logic to update the contact in your contacts array or storage
    const updatedContacts = contacts.map((contact) =>
      contact.id === updatedContact.id ? updatedContact : contact
    );

    setContacts(updatedContacts);

    // Update the contact in local storage
    localStorage.setItem('contacts', JSON.stringify(updatedContacts));
  };

  const handleAddContact = () => {
    // Navigate to the ContactForm page
    history.push('/contactform');
  };

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  const page = 0; // Add your logic for handling pagination
  const rowsPerPage = 5; // Adjust the number of rows per page as needed

  return (
    <div className="container">
      <div className="button-container">
        <button onClick={handleAddContact}>Add New Contact</button>
      </div>
      <div className="table-container">
        <Table className="table">
          <TableHead>
            <TableRow>
              <TableCell>ID</TableCell>
              <TableCell>Full Name</TableCell>
              <TableCell>Email Address</TableCell>
              <TableCell>Contact Number</TableCell>
              <TableCell>Location</TableCell>
              <TableCell>Registered Date</TableCell>
              <TableCell>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {contacts.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((contact) => (
              <TableRow key={contact.id}>
                <TableCell>{contact.id}</TableCell>
                <TableCell>{contact.fullName}</TableCell>
                <TableCell>{contact.emailAddress}</TableCell>
                <TableCell>{contact.contactNumber}</TableCell>
                <TableCell>{contact.location}</TableCell>
                <TableCell>{contact.registeredDate}</TableCell>
                <TableCell>
                  <div className="actions">
                    <Button
                      variant="contained"
                      color="primary"
                      onClick={() => handleOpenUpdateDialog(contact.id)}
                    >
                      Update
                    </Button>
                    {/* Add other action buttons as needed */}
                  </div>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
      <div className="pagination-container">
        <TablePagination
          rowsPerPageOptions={[5]}
          component="div"
          count={contacts.length}
          rowsPerPage={rowsPerPage}
          page={page}
          onPageChange={handleChangePage}
          onRowsPerPageChange={handleChangeRowsPerPage}
        />
      </div>

      {/* Add the UpdateContact component */}
      <UpdateContact
        contact={selectedContact}
        onUpdateContact={handleUpdateContact}
        onClose={handleCloseUpdateDialog}
        open={openUpdateDialog}
      />
    </div>
  );
};

export default ContactTable;

